name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Disable shallow clone for better analysis

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install pylint

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed for PR info
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    needs: sonarqube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Verify AWS Credentials
        run: |
          aws sts get-caller-identity

      - name: Transfer Files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r * ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/project/

      - name: SSH into EC2 and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          # Navigate to the project directory
          cd /home/ubuntu/project

          # Set up a virtual environment
          python3 -m venv venv
          source venv/bin/activate

          # Install dependencies
          pip install -r requirements.txt

          # Collect static files and apply migrations
          python manage.py collectstatic --noinput
          python manage.py migrate

          # Restart Gunicorn and Nginx
          sudo systemctl restart gunicorn
          sudo systemctl restart nginx
          EOF

      - name: Post-Deployment Health Check
        run: |
          curl -f http://${{ secrets.EC2_PUBLIC_IP }} || exit 1