name: Build

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install pylint
      - name: Setup SonarQube Scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli-4.8.0.2856-linux.zip
          mv sonar-scanner-4.8.0.2856-linux sonar-scanner
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    needs: sonarqube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          mask-aws-account-id: true

      - name: Create deployment package
        run: |
          zip -r deploy.zip . -x ".git" ".pytest_cache" "pycache/" ".zip"

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$EC2_SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem
          
          echo "Copying deployment package to EC2..."
          scp -i ssh_key.pem -o StrictHostKeyChecking=no deploy.zip $EC2_USERNAME@$EC2_HOST:~/
          
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST '
            echo "Cleaning up old deployment..."
            rm -rf ~/app/*
            
            echo "Unzipping new deployment..."
            unzip -o ~/deploy.zip -d ~/app/
            
            echo "Installing dependencies..."
            cd ~/app
            source venv/bin/activate
            pip install -r requirements.txt
            
            echo "Restarting application service..."
            sudo systemctl restart your-app
            
            echo "Cleaning up..."
            rm ~/deploy.zip
          '
          rm ssh_key.pem
          